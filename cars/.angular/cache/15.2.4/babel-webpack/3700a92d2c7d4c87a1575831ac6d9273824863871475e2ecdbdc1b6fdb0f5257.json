{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../../api/base-service';\nimport { RequestBuilder } from '../../api/request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../api/api-configuration\";\nimport * as i2 from \"@angular/common/http\";\n/**\r\n * Get\r\n */\nexport class USService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation getAllUsers\r\n   */\n\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllUsers()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getAllUsers$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, USService.GetAllUsersPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getAllUsers(params, context) {\n    return this.getAllUsers$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation addUs\r\n   */\n\n  /**\r\n   * Создать.\r\n   *\r\n   * Post\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `addUs()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\n  addUs$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, USService.AddUsPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * Создать.\r\n   *\r\n   * Post\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `addUs$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\n  addUs(params, context) {\n    return this.addUs$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation getUser\r\n   */\n\n  /**\r\n   * Получить user.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getUser$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, USService.GetUserPath, 'get');\n    if (params) {\n      rb.path('login', params.login, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * Получить user.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getUser(params, context) {\n    return this.getUser$Response(params, context).pipe(map(r => r.body));\n  }\n}\nUSService.GetAllUsersPath = '/users';\nUSService.AddUsPath = '/users';\nUSService.GetUserPath = '/users/{login}';\nUSService.ɵfac = function USService_Factory(t) {\n  return new (t || USService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nUSService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: USService,\n  factory: USService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","BaseService","RequestBuilder","map","filter","USService","constructor","config","http","getAllUsers$Response","params","context","rb","rootUrl","GetAllUsersPath","request","build","responseType","accept","pipe","r","getAllUsers","body","addUs$Response","AddUsPath","addUs","getUser$Response","GetUserPath","path","login","getUser","factory","providedIn"],"sourceRoot":"","sources":["C:\\WEB-dev\\cars\\src\\app\\api\\services\\us-service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\r\nimport { BaseService } from '../../api/base-service';\r\nimport { ApiConfiguration } from '../../api/api-configuration';\r\nimport { StrictHttpResponse } from '../../api/strict-http-response';\r\nimport { RequestBuilder } from '../../api/request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { User } from '../../api/models/user';\r\nimport { Users } from '../../api/models/users';\r\n\r\n\r\n/**\r\n * Get\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class USService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getAllUsers\r\n   */\r\n  static readonly GetAllUsersPath = '/users';\r\n\r\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllUsers()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllUsers$Response(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<Users>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, USService.GetAllUsersPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Users>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllUsers(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<Users> {\r\n\r\n    return this.getAllUsers$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<Users>) => r.body as Users)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation addUs\r\n   */\r\n  static readonly AddUsPath = '/users';\r\n\r\n  /**\r\n   * Создать.\r\n   *\r\n   * Post\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `addUs()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addUs$Response(params: {\r\n    body: User\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<User>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, USService.AddUsPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<User>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Создать.\r\n   *\r\n   * Post\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `addUs$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  addUs(params: {\r\n    body: User\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<User> {\r\n\r\n    return this.addUs$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<User>) => r.body as User)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getUser\r\n   */\r\n  static readonly GetUserPath = '/users/{login}';\r\n\r\n  /**\r\n   * Получить user.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getUser$Response(params: {\r\n    login: User;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<User>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, USService.GetUserPath, 'get');\r\n    if (params) {\r\n      rb.path('login', params.login, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<User>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получить user.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getUser(params: {\r\n    login: User;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<User> {\r\n\r\n    return this.getUser$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<User>) => r.body as User)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
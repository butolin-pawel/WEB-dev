{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\n/**\r\n * Get\r\n */\nexport class Service extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation getAllCar\r\n   */\n\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllCar()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getAllCar$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, Service.GetAllCarPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllCar$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getAllCar(params, context) {\n    return this.getAllCar$Response(params, context).pipe(map(r => r.body));\n  }\n}\nService.GetAllCarPath = '/cars';\nService.ɵfac = function Service_Factory(t) {\n  return new (t || Service)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Service,\n  factory: Service.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,YAAY,QAAqB,sBAAsB;AAC5E,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;;;;AAK5C;;;AAMA,OAAM,MAAOC,OAAQ,SAAQJ,WAAW;EACtCK,YACEC,MAAwB,EACxBC,IAAgB;IAEhB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;;;EAKA;;;;;;;;;;EAUAC,kBAAkB,CAACC,MAClB,EACDC,OAAqB;IAInB,MAAMC,EAAE,GAAG,IAAIV,cAAc,CAAC,IAAI,CAACW,OAAO,EAAER,OAAO,CAACS,aAAa,EAAE,KAAK,CAAC;IACzE,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE,kBAAkB;MAC1BP,OAAO,EAAEA;KACV,CAAC,CAAC,CAACQ,IAAI,CACNf,MAAM,CAAEgB,CAAM,IAAKA,CAAC,YAAYpB,YAAY,CAAC,EAC7CG,GAAG,CAAEiB,CAAoB,IAAI;MAC3B,OAAOA,CAA6B;IACtC,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAC,SAAS,CAACX,MACT,EACDC,OAAqB;IAInB,OAAO,IAAI,CAACF,kBAAkB,CAACC,MAAM,EAACC,OAAO,CAAC,CAACQ,IAAI,CACjDhB,GAAG,CAAEiB,CAA2B,IAAKA,CAAC,CAACE,IAAY,CAAC,CACrD;EACH;;AAhEWjB,OAAQ,CAWHS,aAAa,GAAG,OAAO;AAX5BT,OAAQ;mBAARA,OAAO;AAAA;AAAPA,OAAQ;SAARA,OAAO;EAAAkB,SAAPlB,OAAO;EAAAmB,YAFN;AAAM","names":["HttpResponse","BaseService","RequestBuilder","map","filter","Service","constructor","config","http","getAllCar$Response","params","context","rb","rootUrl","GetAllCarPath","request","build","responseType","accept","pipe","r","getAllCar","body","factory","providedIn"],"sourceRoot":"","sources":["C:\\WEB-dev\\cars\\src\\app\\api\\services\\service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { Cars } from '../models/cars';\r\n\r\n\r\n/**\r\n * Get\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class Service extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation getAllCar\r\n   */\r\n  static readonly GetAllCarPath = '/cars';\r\n\r\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getAllCar()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllCar$Response(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<Cars>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, Service.GetAllCarPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'application/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Cars>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получить список.\r\n   *\r\n   * Get\r\n   *\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getAllCar$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getAllCar(params?: {\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<Cars> {\r\n\r\n    return this.getAllCar$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<Cars>) => r.body as Cars)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
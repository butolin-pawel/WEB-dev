{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { Stomp } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport * as i0 from \"@angular/core\";\nexport class WebsocketService {\n  constructor() {\n    const socket = new SockJS('http://localhost:8082/websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.activate();\n  }\n  connectBox() {\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/boxes', message => {\n          observer.next(JSON.parse(message.body));\n        });\n      });\n    });\n  }\n  delBox(data) {\n    this.stompClient.send('/app/deleteBox', {}, JSON.stringify(data));\n  }\n  addBox(data) {\n    this.stompClient.send('/app/addBox', {}, JSON.stringify(data));\n  }\n}\nWebsocketService.ɵfac = function WebsocketService_Factory(t) {\n  return new (t || WebsocketService)();\n};\nWebsocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebsocketService,\n  factory: WebsocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,KAAK,QAA4C,gBAAgB;AAC1E,OAAO,KAAKC,MAAM,MAAM,eAAe;;AAIvC,OAAM,MAAOC,gBAAgB;EAG3BC;IACG,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAAC,iCAAiC,CAAC;IAC7D,IAAI,CAACI,WAAW,GAAGL,KAAK,CAACM,IAAI,CAACF,MAAM,CAAC;IACrC,IAAI,CAACC,WAAW,CAACE,QAAQ,EAAE;EAC7B;EACFC,UAAU;IACN,OAAO,IAAIT,UAAU,CAACU,QAAQ,IAAG;MAC/B,IAAI,CAACJ,WAAW,CAACK,OAAO,CAAC,EAAE,EAAE,MAAK;QAChC,IAAI,CAACL,WAAW,CAACM,SAAS,CAAC,cAAc,EAAGC,OAAiB,IAAI;UAC/DH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC;QAC3C,CAAC,CAAC;MACN,CAAC,CAAC;IACA,CAAC,CAAC;EAEJ;EACAC,MAAM,CAACC,IAAS;IACd,IAAI,CAACb,WAAW,CAACc,IAAI,CAAC,gBAAgB,EAAE,EAAE,EAAEL,IAAI,CAACM,SAAS,CAACF,IAAI,CAAC,CAAC;EACnE;EACAG,MAAM,CAACH,IAAW;IAChB,IAAI,CAACb,WAAW,CAACc,IAAI,CAAC,aAAa,EAAE,EAAE,EAAEL,IAAI,CAACM,SAAS,CAACF,IAAI,CAAC,CAAC;EAChE;;AAvBWhB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAoB,SAAhBpB,gBAAgB;EAAAqB,YAFf;AAAM","names":["Observable","Stomp","SockJS","WebsocketService","constructor","socket","stompClient","over","activate","connectBox","observer","connect","subscribe","message","next","JSON","parse","body","delBox","data","send","stringify","addBox","factory","providedIn"],"sourceRoot":"","sources":["C:\\WEB-dev\\lab6\\src\\app\\websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Stomp, Client, StompSubscription, IMessage} from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebsocketService {\n  private stompClient;\n\n  constructor() {\n     const socket = new SockJS('http://localhost:8082/websocket');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.activate();\n  }\nconnectBox(): Observable<any> {\n    return new Observable(observer => {\n      this.stompClient.connect({}, () => {\n        this.stompClient.subscribe('/topic/boxes', (message: IMessage) => {\n          observer.next(JSON.parse(message.body));\n      });\n  });\n    });\n\n  }\n  delBox(data: any): void {\n    this.stompClient.send('/app/deleteBox', {}, JSON.stringify(data));\n  }\n  addBox(data  : any){\n    this.stompClient.send('/app/addBox', {}, JSON.stringify(data));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}